name: CI
env:
  MIRROR_URL: git@github.com:EpitechPromo2026/B-CPP-500-NAN-5-1-rtype-louis.barreteau.git
  SERVER_BINARY: "r-type_server"
  CLIENT_BINARY: "r-type_client"
  UNWANTED_FILES: '^(.*\/)*((.*\.(([ao])|(so)|(gcno)|(gcda)|(gcov)))|(^.*\~)|(.*\/tmp\/.+)|(#.*\#))$'
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    branches-ignore:
      - 'ga-ignore-*'

jobs:
  check_repository_cleanliness:
    runs-on: ubuntu-latest
    outputs:
      summary: ${{ steps.check_unwanted_files.outputs.summary }}
      result: ${{ steps.check_unwanted_files.outputs.result }}
    steps:
      - name: Fetch repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: check_unwanted_files
        name: Check unwanted files
        run: |
          echo "summary=| Check unwanted files " >> $GITHUB_OUTPUT
          error=0
          for file in $(git ls-files); do
            if [[ $file =~ $UNWANTED_FILES ]]; then
              echo "::error title=Unwanted file detected::File $file is not allowed in the repository."
              error=1
            fi
          done
          if [ $error -eq 1 ]; then
            echo "result=| :x: |" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "result=| :white_check_mark: |" >> $GITHUB_OUTPUT

  check_program_compilation_and_run_tests:
    runs-on: ubuntu-latest
    needs: [check_repository_cleanliness]
    outputs:
      summary: ${{ steps.check_if_executable_exists.outputs.summary }}
      result: ${{ steps.check_if_executable_exists.outputs.result }}
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: Fetch repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          pip install pyinstaller
      - name: Compile project
        run: |
          mkdir build
          cmake -B build
          make server -C build
          make client -C build
      - id: check_label_and_binary
        name: Check label and if binary exists
        run: |
          if [ -z "${{ github.event.label.name }}" ]; then
            echo "No Label provided."
            exit 1
          elif [ "${{ github.event.label.name }}" == "client" ]; then
            echo "Label 'client' is present."
            echo "summary=| Check if executable exists " >> $GITHUB_OUTPUT
            if [ -f $CLIENT_BINARY ] && [ -x $CLIENT_BINARY ]; then
              echo "result=| :white_check_mark: |" >> $GITHUB_OUTPUT
            else
              echo "::error title=Executable not found::The executable $CLIENT_BINARY was not found."
              echo "result=| :x: |" >> $GITHUB_OUTPUT
              exit 1
            fi
          elif [ "${{github.event.label.name }}" == "server" ]; then
            echo "Label 'server' is present."
            echo "summary=| Check if executable exists " >> $GITHUB_OUTPUT
            if [ -f $SERVER_BINARY ] && [ -x $SERVER_BINARY ]; then
              echo "result=| :white_check_mark: |" >> $GITHUB_OUTPUT
            else
              echo "::error title=Executable not found::The executable $SERVER_BINARY was not found."
              echo "result=| :x: |" >> $GITHUB_OUTPUT
              exit 1
            fi
          elif [ "${{github.event.label.name }}" == "ecs" ]; then
            echo "nothing to compile, ecs is already compiled with either 'server' or 'client'."
          else
            echo "Label '${{ github.event.label.name }}' is not valid."
            exit 1
          fi

      - name: Compile and run unit tests
        run: |
          if [ "${{ github.event.label.name }}" == "server"]; then
            echo "summary=| Compile and run server unit tests " >> $GITHUB_OUTPUT
            make server_tests_run -C build         
          elif [ "${{ github.event.label.name }}" == "client"]; then
            echo "summary=| Compile and run client unit tests " >> $GITHUB_OUTPUT
            make client_tests_run -C build
          elif [ "${{ github.event.label.name }}" == "ecs"]; then
            echo "summary=| Compile and run ecs unit tests " >> $GITHUB_OUTPUT
            make ecs_tests_run -C build
          else
            echo "no unit tests to run"
          fi
          if [ $? -eq 0 ]; then
            echo "result=| :white_check_mark: |" >> $GITHUB_OUTPUT
          else
            echo "::error title=Unit tests failed::The unit tests failed."
            echo "result=| :x: |" >> $GITHUB_OUTPUT
            exit 1
          fi
      - id: run_functionals_tests
        name: Run functionals tests
        run: |
          wget "https://github.com/Atomot/ftest/releases/download/v0.1.0/ftest" -O ftest
          chmod +x ftest
          echo "::add-path::$GITHUB_WORKSPACE/ftest"
          echo "summary=| Run functionals tests " >> $GITHUB_OUTPUT
          if [ "${{ github.event.label.name }}" == "server"]; then
            if [ -n "$(find "tests/server" -name '*.ftest.toml')" ]; then
              $GITHUB_WORKSPACE/ftest tests/server
              error=0
              if [ $? -ne 0 ]; then
                $error = 1
              fi
              if [ $error -eq 1 ]; then
                echo "::error title=Functionals tests failed::The functionals tests failed."
                echo "result=| :x: |" >> $GITHUB_OUTPUT
                exit 1
              fi
            fi
          elif [ "${{ github.event.label.name }}" == "client"]; then
            if [ -n "$(find "tests/client" -name '*.ftest.toml')" ]; then
              $GITHUB_WORKSPACE/ftest tests/client
              error=0
              if [ $? -ne 0 ]; then
                $error = 1
              fi
              if [ $error -eq 1 ]; then
                echo "::error title=Functionals tests failed::The functionals tests failed."
                echo "result=| :x: |" >> $GITHUB_OUTPUT
                exit 1
              fi
            fi
          elif [ "${{ github.event.label.name }}" == "ecs"]; then
            if [ -n "$(find "tests/ecs" -name '*.ftest.toml')" ]; then
              $GITHUB_WORKSPACE/ftest tests/ecs
              error=0
              if [ $? -ne 0 ]; then
                $error = 1
              fi
              if [ $error -eq 1 ]; then
                echo "::error title=Functionals tests failed::The functionals tests failed."
                echo "result=| :x: |" >> $GITHUB_OUTPUT
                exit 1
              fi
            fi
          else
            "no functional tests to run"
          fi
          echo "result=| :white_check_mark: |" >> $GITHUB_OUTPUT

  create_doxygen:
    runs-on: ubuntu-latest
    needs: [check_program_compilation_and_run_tests]
    outputs:
      summary: ${{ steps.create_doxygen.outputs.summary }}
      result: ${{ steps.create_doxygen.outputs.result }}
    steps:
      - name : Fetch repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install doxygen
        run: |
          sudo apt-get install -y doxygen
      - name: Create doxygen
        run: |
          doxygen Doxyfile
      - id: create_doxygen
        name: Add doxygen to release
        run: |
          echo "summary=| Create doxygen " >> $GITHUB_OUTPUT
          echo "result=| :white_check_mark: |" >> $GITHUB_OUTPUT

  print_summary:
    runs-on: ubuntu-latest
    needs: [check_repository_cleanliness, check_program_compilation_and_run_tests, create_doxygen]
    env:
      check_repository_cleanliness: ${{ needs.check_repository_cleanliness.outputs.summary }}
      check_repository_cleanliness_result: ${{ needs.check_repository_cleanliness.outputs.result }}
      check_program_compilation: ${{ needs.check_program_compilation.outputs.summary }}
      check_program_compilation_result: ${{ needs.check_program_compilation.outputs.result }}
      run_units_tests: ${{ needs.run_units_tests.outputs.summary }}
      run_units_tests_result: ${{ needs.run_units_tests.outputs.result }}
      run_functionals_tests: ${{ needs.run_functionals_tests.outputs.summary }}
      run_functionals_tests_result: ${{ needs.run_functionals_tests.outputs.result }}
      create_doxygen: ${{ needs.create_doxygen.outputs.summary }}
      create_doxygen_result: ${{ needs.create_doxygen.outputs.result }}
    steps:
      - name: Print summary
        run: |
          echo "## Summary of the workflow :rocket:"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| ---- | ------ |" >> $GITHUB_STEP_SUMMARY
          echo "$check_repository_cleanliness $check_repository_cleanliness_result" >> $GITHUB_STEP_SUMMARY
          echo "$check_program_compilation $check_program_compilation_result" >> $GITHUB_STEP_SUMMARY
          echo "$run_units_tests $run_units_tests_result" >> $GITHUB_STEP_SUMMARY
          echo "$run_functionals_tests $run_functionals_tests_result" >> $GITHUB_STEP_SUMMARY
          echo "$create_doxygen $create_doxygen_result" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  push_to_mirror:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [create_doxygen]
    steps:
      - name: Fetch repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Push to mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.SSH_KEY }}